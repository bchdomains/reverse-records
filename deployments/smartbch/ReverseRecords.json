{
  "address": "0x0efB8EE0F6d6ba04F26101683F062d7Ca6F58A40",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "getAddrs",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "r",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "getNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "r",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x79a3f3726bf4a5af299935473bea086aa67fa4a71d5376cbeb5e54758e4dcbe0",
  "receipt": {
    "to": null,
    "from": "0xb69d54a4e31f24AFdD9eB1b53f8319aC83C646c9",
    "contractAddress": "0x0efB8EE0F6d6ba04F26101683F062d7Ca6F58A40",
    "transactionIndex": 0,
    "gasUsed": "1447539",
    "logsBloom": "0x
    "blockHash": "0xe1a69b07eec0f89b8fbfe4c23fc00303e845f57d6769500935db88d4423c6734",
    "transactionHash": "0x79a3f3726bf4a5af299935473bea086aa67fa4a71d5376cbeb5e54758e4dcbe0",
    "logs": [],
    "blockNumber": 3672064,
    "cumulativeGasUsed": "1447539",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCfb86556760d03942EBf1ba88a9870e67D77b627"
  ],
  "numDeployments": 2,
  "solcInputHash": "251cedf1ae14c3903a9418a499ca7845",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"getAddrs\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"r\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"r\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"The `constructor` takes ENS registry address\"},\"getAddrs(string[],uint256)\":{\"notice\":\"Read only function to lookup addresses for a certain coinType\"},\"getNames(address[])\":{\"notice\":\"Read only function to return ens name only if both forward and reverse resolution are set     *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReverseRecords.sol\":\"ReverseRecords\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@bchdomains/lns-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x942ef29bd7c0f62228aeb91879ddd1ba101f52a2162970d3e48adffa498f4483\"},\"@bchdomains/lns-contracts/contracts/registry/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable {\\n    ENS public ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     * @param resolverAddr The address of the default reverse resolver.\\n     */\\n    constructor(ENS ensAddr, NameResolver resolverAddr) {\\n        ens = ensAddr;\\n        defaultResolver = resolverAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address owner) public returns (bytes32) {\\n        return _claimWithResolver(msg.sender, owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(address addr, address owner)\\n        public\\n        authorised(addr)\\n        returns (bytes32)\\n    {\\n        return _claimWithResolver(addr, owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver)\\n        public\\n        returns (bytes32)\\n    {\\n        return _claimWithResolver(msg.sender, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record specified with the\\n     *      address provided\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolverForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public authorised(addr) returns (bytes32) {\\n        return _claimWithResolver(addr, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public returns (bytes32) {\\n        bytes32 node = _claimWithResolver(\\n            msg.sender,\\n            address(this),\\n            address(defaultResolver)\\n        );\\n        defaultResolver.setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param owner The owner of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        string memory name\\n    ) public authorised(addr) returns (bytes32) {\\n        bytes32 node = _claimWithResolver(\\n            addr,\\n            address(this),\\n            address(defaultResolver)\\n        );\\n        defaultResolver.setName(node, name);\\n        ens.setSubnodeOwner(ADDR_REVERSE_NODE, sha3HexAddress(addr), owner);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    /* Internal functions */\\n\\n    function _claimWithResolver(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) internal returns (bytes32) {\\n        bytes32 label = sha3HexAddress(addr);\\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\\n        address currentResolver = ens.resolver(node);\\n        bool shouldUpdateResolver = (resolver != address(0x0) &&\\n            resolver != currentResolver);\\n        address newResolver = shouldUpdateResolver ? resolver : currentResolver;\\n\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, label, owner, newResolver, 0);\\n\\n        emit ReverseClaimed(addr, node);\\n\\n        return node;\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6151b50f057afe5e32f9ef2f05b3c5c3ac8719b5900aead76d60be4356997ef6\"},\"@bchdomains/lns-contracts/contracts/resolvers/ISupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) external pure returns(bool);\\n}\",\"keccak256\":\"0x4960422af4a3d38a2c440c656104465cba7dea0231cb7ae4a489a85dd65f645f\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./ISupportsInterface.sol\\\";\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is ISupportsInterface, IABIResolver, IAddressResolver, IAddrResolver, IContentHashResolver, IDNSRecordResolver, IDNSZoneResolver, IInterfaceResolver, INameResolver, IPubkeyResolver, ITextResolver {\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n    function setAddr(bytes32 node, address addr) external;\\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n    function setName(bytes32 node, string calldata _name) external;\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n    function setContent(bytes32 node, bytes32 hash) external;\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0x334dfe224d0acfd99e31f939710833ced6281228cd71e1065ab985cf4df2f3fe\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./SupportsInterface.sol\\\";\\n\\nabstract contract ResolverBase is SupportsInterface {\\n    function isAuthorised(bytes32 node) internal virtual view returns(bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xee4e3e99b515bdb2fc231c81fc6ff35cf09c3b57e9aaef538bfbb32f7c59248c\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/SupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ISupportsInterface.sol\\\";\\n\\nabstract contract SupportsInterface is ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(ISupportsInterface).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xcd27206ee8f8bd520d5441294f6438dde98f6933eb8801ee59a0155b8a8cde1b\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IABIResolver.sol\\\";\\nimport \\\"../ResolverBase.sol\\\";\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x37d037dd1cb59d7406ccd07d69e7206470c0aa3331c0efb92001769389bf4f2d\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n}\\n\",\"keccak256\":\"0x20717682fa28eb1755a3b6ade738c8e0239c1cc393579058d4c3ffaca238c04b\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record);\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n    // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n    event DNSZoneCleared(bytes32 indexed node);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(bytes32 node, bytes32 name, uint16 resource) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x640992fd5ad915a67712e2343ea0b8c5c0b88ea2646ff6bb713d448bef6ebfb5\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash);\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x3b3ca51ab4dcc4eee417bf1ffa54e10d9cf6a30d8f0e3722915965b06355ecb4\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc2673ebfb678b4c2730bff0434daf3a974d9ee0696c4adf533b41802f291745d\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x36a6602f2d76f373c5e1dcded0c87e1d3ab5180dbbbea7aa2a8d0e9a36273e38\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x0c364a5b65b6fff279adbe1fd6498c488feabeec781599cd60a5844e80ee7d88\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Namehash.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nlibrary Strings {\\n    struct slice {\\n        uint _len;\\n        uint _ptr;\\n    }\\n    \\n    /*\\n     * @dev Returns a slice containing the entire string.\\n     * @param self The string to make a slice from.\\n     * @return A newly allocated slice containing the entire string.\\n     */\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\n        uint ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of the slice.\\n     * @param self The slice to hash.\\n     * @return The hash of the slice.\\n     */\\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\\n        assembly {\\n            ret := keccak256(mload(add(self, 32)), mload(self))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice is empty (has a length of 0).\\n     * @param self The slice to operate on.\\n     * @return True if the slice is empty, False otherwise.\\n     */\\n    function empty(slice memory self) internal pure returns (bool) {\\n        return self._len == 0;\\n    }\\n    \\n    // Returns the memory address of the first byte after the last occurrence of\\n    // `needle` in `self`, or the address of `self` if not found.\\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\n        uint ptr;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n\\n                bytes32 needledata;\\n                assembly { needledata := and(mload(needleptr), mask) }\\n\\n                ptr = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly { ptrdata := and(mload(ptr), mask) }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr <= selfptr)\\n                        return selfptr;\\n                    ptr--;\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\n                }\\n                return ptr + needlelen;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly { hash := keccak256(needleptr, needlelen) }\\n                ptr = selfptr + (selflen - needlelen);\\n                while (ptr >= selfptr) {\\n                    bytes32 testHash;\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\n                    if (hash == testHash)\\n                        return ptr + needlelen;\\n                    ptr -= 1;\\n                }\\n            }\\n        }\\n        return selfptr;\\n    }\\n    \\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and `token` to everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = ptr;\\n        token._len = self._len - (ptr - self._ptr);\\n        if (ptr == self._ptr) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n        }\\n        return token;\\n    }\\n}\\n\\nlibrary Namehash {\\n    using Strings for *;\\n    \\n    function namehash(string memory name) pure internal returns(bytes32 hash) {\\n        hash = bytes32(0);\\n        Strings.slice memory nameslice = name.toSlice();\\n        Strings.slice memory delim = \\\".\\\".toSlice();\\n        Strings.slice memory token;\\n        for(nameslice.rsplit(delim, token); !token.empty(); nameslice.rsplit(delim, token)) {\\n            hash = keccak256(abi.encodePacked(hash, token.keccak()));\\n        }\\n        return hash;\\n    }\\n}\\n\",\"keccak256\":\"0xe761d13aaf821b160a5535af63ae4b884153efc520ee4e52aafcf95d0c411409\"},\"contracts/ReverseRecords.sol\":{\"content\":\"pragma solidity ^0.8.4;pragma experimental ABIEncoderV2;\\nimport \\\"./Namehash.sol\\\";\\nimport '@bchdomains/lns-contracts/contracts/registry/ENS.sol';\\nimport '@bchdomains/lns-contracts/contracts/registry/ReverseRegistrar.sol';\\nimport '@bchdomains/lns-contracts/contracts/resolvers/Resolver.sol';\\ncontract ReverseRecords {\\n    ENS ens;\\n    ReverseRegistrar registrar;\\n    bytes32 private constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    /**\\n     * The `constructor` takes ENS registry address\\n     */\\n    constructor(ENS _ens) {\\n        ens = _ens;\\n        registrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));\\n    }\\n\\n    /**\\n     * Read only function to return ens name only if both forward and reverse resolution are set     *\\n     */\\n    function getNames(address[] calldata addresses) external view returns (string[] memory r) {\\n        r = new string[](addresses.length);\\n        for(uint i = 0; i < addresses.length; i++) {\\n            bytes32 _node = node(addresses[i]);\\n            address resolverAddress = ens.resolver(_node);\\n            if(resolverAddress != address(0x0)){\\n                Resolver resolver = Resolver(resolverAddress);\\n                string memory name = resolver.name(_node);\\n                if(bytes(name).length == 0 ){\\n                    continue;\\n                }\\n                bytes32 namehash = Namehash.namehash(name);\\n                address forwardResolverAddress = ens.resolver(namehash);\\n                if(forwardResolverAddress != address(0x0)){\\n                    Resolver forwardResolver = Resolver(forwardResolverAddress);\\n                    address forwardAddress = forwardResolver.addr(namehash);\\n                    if(forwardAddress == addresses[i]){\\n                        r[i] = name;\\n                    }\\n                }\\n            }\\n        }\\n        return r;\\n    }\\n\\n    function node(address addr) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\\n    }\\n\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        addr;\\n        ret; // Stop warning us about unused variables\\n        assembly {\\n            let _lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\\n\\n            for { let i := 40 } gt(i, 0) { } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), _lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), _lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    /**\\n     * Read only function to lookup addresses for a certain coinType\\n     */\\n    function getAddrs(string[] calldata names, uint coinType) external view returns (bytes[] memory r) {\\n        r = new bytes[](names.length);\\n        for(uint i = 0; i < names.length; i++) {\\n            bytes32 namehash = Namehash.namehash(names[i]);\\n            address resolverAddress = ens.resolver(namehash);\\n            if(resolverAddress != address(0x0)){\\n                Resolver forwardResolver = Resolver(resolverAddress);\\n                bytes memory forwardAddress = forwardResolver.addr(namehash, coinType);\\n                if(forwardAddress.length == 0) {\\n                    continue;\\n                }\\n                r[i] = forwardAddress;\\n            }\\n        }\\n        return r;\\n    }\\n}\",\"keccak256\":\"0xea99de1152e8033cb7d95b4281e406e7cd67b477138886fd7d018a2f2e281d27\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b1b38038062001b1b8339818101604052810190620000379190620001ea565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be37f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b6040518263ffffffff1660e01b8152600401620000f5919062000227565b60206040518083038186803b1580156200010e57600080fd5b505afa15801562000123573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001499190620001be565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620002ca565b600081519050620001a18162000296565b92915050565b600081519050620001b881620002b0565b92915050565b600060208284031215620001d157600080fd5b6000620001e18482850162000190565b91505092915050565b600060208284031215620001fd57600080fd5b60006200020d84828501620001a7565b91505092915050565b620002218162000258565b82525050565b60006020820190506200023e600083018462000216565b92915050565b6000620002518262000276565b9050919050565b6000819050919050565b60006200026f8262000244565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002a18162000244565b8114620002ad57600080fd5b50565b620002bb8162000262565b8114620002c757600080fd5b50565b61184180620002da6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063344b9a1b1461003b578063cbf8b66c1461006b575b600080fd5b61005560048036038101906100509190610eed565b61009b565b60405161006291906111ac565b60405180910390f35b61008560048036038101906100809190610ea8565b6103b2565b60405161009291906111ce565b60405180910390f35b60608383905067ffffffffffffffff8111156100e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561011357816020015b60608152602001906001900390816100fe5790505b50905060005b848490508110156103aa5760006101bc868684818110610162577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906101749190611234565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061088e565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b815260040161021a91906111f0565b60206040518083038186803b15801561023257600080fd5b505afa158015610246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026a9190610e56565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461039457600081905060008173ffffffffffffffffffffffffffffffffffffffff1663f1cb7e0685896040518363ffffffff1660e01b81526004016102e292919061120b565b60006040518083038186803b1580156102fa57600080fd5b505afa15801561030e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103379190610f45565b905060008151141561034c5750505050610397565b80868681518110610386577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525050505b50505b80806103a2906116f7565b915050610119565b509392505050565b60608282905067ffffffffffffffff8111156103f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561042a57816020015b60608152602001906001900390816104155790505b50905060005b83839050811015610887576000610493858584818110610479577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061048e9190610e2d565b610967565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b81526004016104f191906111f0565b60206040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105419190610e56565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461087157600081905060008173ffffffffffffffffffffffffffffffffffffffff1663691f3431856040518263ffffffff1660e01b81526004016105b791906111f0565b60006040518083038186803b1580156105cf57600080fd5b505afa1580156105e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061060c9190610f86565b90506000815114156106215750505050610874565b600061062c8261088e565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b815260040161068a91906111f0565b60206040518083038186803b1580156106a257600080fd5b505afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190610e56565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461086c57600081905060008173ffffffffffffffffffffffffffffffffffffffff16633b3b57de856040518263ffffffff1660e01b815260040161075091906111f0565b60206040518083038186803b15801561076857600080fd5b505afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190610e7f565b90508b8b8a8181106107db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906107f09190610e2d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561086957848a8a8151811061085d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505b50505b505050505b50505b808061087f906116f7565b915050610430565b5092915050565b60008060001b905060006108a1836109c4565b905060006108e36040518060400160405280600181526020017f2e000000000000000000000000000000000000000000000000000000000000008152506109c4565b90506108ed610c5b565b6109028282856109f29092919063ffffffff16565b505b61090d81610aa0565b61095f578361091b82610ab0565b60405160200161092c929190611180565b6040516020818303038152906040528051906020012093506109598282856109f29092919063ffffffff16565b50610904565b505050919050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b61099683610ac1565b6040516020016109a7929190611180565b604051602081830303815290604052805190602001209050919050565b6109cc610c5b565b600060208301905060405180604001604052808451815260200182815250915050919050565b6109fa610c5b565b6000610a188560000151866020015186600001518760200151610b2b565b905080836020018181525050846020015181610a3491906115dd565b8560000151610a4391906115dd565b8360000181815250508460200151811415610a68576000856000018181525050610a95565b83600001518360000151610a7c91906113bc565b85600001818151610a8d91906115dd565b915081815250505b829150509392505050565b6000808260000151149050919050565b600081516020830151209050919050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b6000811115610b1d5760018103905081600f85161a815360108404935060018103905081600f85161a8153601084049350610ae7565b506028600020915050919050565b600080858411610c4e5760208411610bea5760006001856020610b4e91906115dd565b6008610b5a9190611583565b6002610b669190611465565b610b7091906115dd565b1960001b90506000818551169050858888610b8b91906113bc565b610b9591906115dd565b925060008284511690505b818114610bd357878411610bba5787945050505050610c53565b8380610bc59061169c565b945050828451169050610ba0565b8684610bdf91906113bc565b945050505050610c53565b600084842090508487610bfd91906115dd565b86610c0891906113bc565b91505b858210610c4c576000858320905080821415610c37578583610c2d91906113bc565b9350505050610c53565b600183610c4491906115dd565b925050610c0b565b505b849150505b949350505050565b604051806040016040528060008152602001600081525090565b6000610c88610c83846112b0565b61128b565b905082815260208101848484011115610ca057600080fd5b610cab848285611669565b509392505050565b6000610cc6610cc1846112e1565b61128b565b905082815260208101848484011115610cde57600080fd5b610ce9848285611669565b509392505050565b600081359050610d00816117c6565b92915050565b600081519050610d15816117c6565b92915050565b600081519050610d2a816117dd565b92915050565b60008083601f840112610d4257600080fd5b8235905067ffffffffffffffff811115610d5b57600080fd5b602083019150836020820283011115610d7357600080fd5b9250929050565b60008083601f840112610d8c57600080fd5b8235905067ffffffffffffffff811115610da557600080fd5b602083019150836020820283011115610dbd57600080fd5b9250929050565b600082601f830112610dd557600080fd5b8151610de5848260208601610c75565b91505092915050565b600082601f830112610dff57600080fd5b8151610e0f848260208601610cb3565b91505092915050565b600081359050610e27816117f4565b92915050565b600060208284031215610e3f57600080fd5b6000610e4d84828501610cf1565b91505092915050565b600060208284031215610e6857600080fd5b6000610e7684828501610d06565b91505092915050565b600060208284031215610e9157600080fd5b6000610e9f84828501610d1b565b91505092915050565b60008060208385031215610ebb57600080fd5b600083013567ffffffffffffffff811115610ed557600080fd5b610ee185828601610d30565b92509250509250929050565b600080600060408486031215610f0257600080fd5b600084013567ffffffffffffffff811115610f1c57600080fd5b610f2886828701610d7a565b93509350506020610f3b86828701610e18565b9150509250925092565b600060208284031215610f5757600080fd5b600082015167ffffffffffffffff811115610f7157600080fd5b610f7d84828501610dc4565b91505092915050565b600060208284031215610f9857600080fd5b600082015167ffffffffffffffff811115610fb257600080fd5b610fbe84828501610dee565b91505092915050565b6000610fd383836110ff565b905092915050565b6000610fe78383611138565b905092915050565b6000610ffa82611332565b6110048185611378565b93508360208202850161101685611312565b8060005b8581101561105257848403895281516110338582610fc7565b945061103e8361135e565b925060208a0199505060018101905061101a565b50829750879550505050505092915050565b600061106f8261133d565b6110798185611389565b93508360208202850161108b85611322565b8060005b858110156110c757848403895281516110a88582610fdb565b94506110b38361136b565b925060208a0199505060018101905061108f565b50829750879550505050505092915050565b6110e281611635565b82525050565b6110f96110f482611635565b611740565b82525050565b600061110a82611348565b611114818561139a565b9350611124818560208601611669565b61112d816117a8565b840191505092915050565b600061114382611353565b61114d81856113ab565b935061115d818560208601611669565b611166816117a8565b840191505092915050565b61117a8161165f565b82525050565b600061118c82856110e8565b60208201915061119c82846110e8565b6020820191508190509392505050565b600060208201905081810360008301526111c68184610fef565b905092915050565b600060208201905081810360008301526111e88184611064565b905092915050565b600060208201905061120560008301846110d9565b92915050565b600060408201905061122060008301856110d9565b61122d6020830184611171565b9392505050565b6000808335600160200384360303811261124d57600080fd5b80840192508235915067ffffffffffffffff82111561126b57600080fd5b60208301925060018202360383131561128357600080fd5b509250929050565b60006112956112a6565b90506112a182826116c6565b919050565b6000604051905090565b600067ffffffffffffffff8211156112cb576112ca611779565b5b6112d4826117a8565b9050602081019050919050565b600067ffffffffffffffff8211156112fc576112fb611779565b5b611305826117a8565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006113c78261165f565b91506113d28361165f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114075761140661174a565b5b828201905092915050565b6000808291508390505b600185111561145c578086048111156114385761143761174a565b5b60018516156114475780820291505b8081029050611455856117b9565b945061141c565b94509492505050565b60006114708261165f565b915061147b8361165f565b92506114a87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846114b0565b905092915050565b6000826114c0576001905061157c565b816114ce576000905061157c565b81600181146114e457600281146114ee5761151d565b600191505061157c565b60ff841115611500576114ff61174a565b5b8360020a9150848211156115175761151661174a565b5b5061157c565b5060208310610133831016604e8410600b84101617156115525782820a90508381111561154d5761154c61174a565b5b61157c565b61155f8484846001611412565b925090508184048111156115765761157561174a565b5b81810290505b9392505050565b600061158e8261165f565b91506115998361165f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115d2576115d161174a565b5b828202905092915050565b60006115e88261165f565b91506115f38361165f565b9250828210156116065761160561174a565b5b828203905092915050565b600061161c8261163f565b9050919050565b600061162e8261163f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561168757808201518184015260208101905061166c565b83811115611696576000848401525b50505050565b60006116a78261165f565b915060008214156116bb576116ba61174a565b5b600182039050919050565b6116cf826117a8565b810181811067ffffffffffffffff821117156116ee576116ed611779565b5b80604052505050565b60006117028261165f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117355761173461174a565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b6117cf81611611565b81146117da57600080fd5b50565b6117e681611623565b81146117f157600080fd5b50565b6117fd8161165f565b811461180857600080fd5b5056fea2646970667358221220c223cd09250ce936de06eeaade6da8c02506970e442dd1c0a97797ba8910da2e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063344b9a1b1461003b578063cbf8b66c1461006b575b600080fd5b61005560048036038101906100509190610eed565b61009b565b60405161006291906111ac565b60405180910390f35b61008560048036038101906100809190610ea8565b6103b2565b60405161009291906111ce565b60405180910390f35b60608383905067ffffffffffffffff8111156100e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561011357816020015b60608152602001906001900390816100fe5790505b50905060005b848490508110156103aa5760006101bc868684818110610162577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906101749190611234565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061088e565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b815260040161021a91906111f0565b60206040518083038186803b15801561023257600080fd5b505afa158015610246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026a9190610e56565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461039457600081905060008173ffffffffffffffffffffffffffffffffffffffff1663f1cb7e0685896040518363ffffffff1660e01b81526004016102e292919061120b565b60006040518083038186803b1580156102fa57600080fd5b505afa15801561030e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103379190610f45565b905060008151141561034c5750505050610397565b80868681518110610386577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525050505b50505b80806103a2906116f7565b915050610119565b509392505050565b60608282905067ffffffffffffffff8111156103f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561042a57816020015b60608152602001906001900390816104155790505b50905060005b83839050811015610887576000610493858584818110610479577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061048e9190610e2d565b610967565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b81526004016104f191906111f0565b60206040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105419190610e56565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461087157600081905060008173ffffffffffffffffffffffffffffffffffffffff1663691f3431856040518263ffffffff1660e01b81526004016105b791906111f0565b60006040518083038186803b1580156105cf57600080fd5b505afa1580156105e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061060c9190610f86565b90506000815114156106215750505050610874565b600061062c8261088e565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b815260040161068a91906111f0565b60206040518083038186803b1580156106a257600080fd5b505afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190610e56565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461086c57600081905060008173ffffffffffffffffffffffffffffffffffffffff16633b3b57de856040518263ffffffff1660e01b815260040161075091906111f0565b60206040518083038186803b15801561076857600080fd5b505afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190610e7f565b90508b8b8a8181106107db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906107f09190610e2d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561086957848a8a8151811061085d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505b50505b505050505b50505b808061087f906116f7565b915050610430565b5092915050565b60008060001b905060006108a1836109c4565b905060006108e36040518060400160405280600181526020017f2e000000000000000000000000000000000000000000000000000000000000008152506109c4565b90506108ed610c5b565b6109028282856109f29092919063ffffffff16565b505b61090d81610aa0565b61095f578361091b82610ab0565b60405160200161092c929190611180565b6040516020818303038152906040528051906020012093506109598282856109f29092919063ffffffff16565b50610904565b505050919050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b61099683610ac1565b6040516020016109a7929190611180565b604051602081830303815290604052805190602001209050919050565b6109cc610c5b565b600060208301905060405180604001604052808451815260200182815250915050919050565b6109fa610c5b565b6000610a188560000151866020015186600001518760200151610b2b565b905080836020018181525050846020015181610a3491906115dd565b8560000151610a4391906115dd565b8360000181815250508460200151811415610a68576000856000018181525050610a95565b83600001518360000151610a7c91906113bc565b85600001818151610a8d91906115dd565b915081815250505b829150509392505050565b6000808260000151149050919050565b600081516020830151209050919050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b6000811115610b1d5760018103905081600f85161a815360108404935060018103905081600f85161a8153601084049350610ae7565b506028600020915050919050565b600080858411610c4e5760208411610bea5760006001856020610b4e91906115dd565b6008610b5a9190611583565b6002610b669190611465565b610b7091906115dd565b1960001b90506000818551169050858888610b8b91906113bc565b610b9591906115dd565b925060008284511690505b818114610bd357878411610bba5787945050505050610c53565b8380610bc59061169c565b945050828451169050610ba0565b8684610bdf91906113bc565b945050505050610c53565b600084842090508487610bfd91906115dd565b86610c0891906113bc565b91505b858210610c4c576000858320905080821415610c37578583610c2d91906113bc565b9350505050610c53565b600183610c4491906115dd565b925050610c0b565b505b849150505b949350505050565b604051806040016040528060008152602001600081525090565b6000610c88610c83846112b0565b61128b565b905082815260208101848484011115610ca057600080fd5b610cab848285611669565b509392505050565b6000610cc6610cc1846112e1565b61128b565b905082815260208101848484011115610cde57600080fd5b610ce9848285611669565b509392505050565b600081359050610d00816117c6565b92915050565b600081519050610d15816117c6565b92915050565b600081519050610d2a816117dd565b92915050565b60008083601f840112610d4257600080fd5b8235905067ffffffffffffffff811115610d5b57600080fd5b602083019150836020820283011115610d7357600080fd5b9250929050565b60008083601f840112610d8c57600080fd5b8235905067ffffffffffffffff811115610da557600080fd5b602083019150836020820283011115610dbd57600080fd5b9250929050565b600082601f830112610dd557600080fd5b8151610de5848260208601610c75565b91505092915050565b600082601f830112610dff57600080fd5b8151610e0f848260208601610cb3565b91505092915050565b600081359050610e27816117f4565b92915050565b600060208284031215610e3f57600080fd5b6000610e4d84828501610cf1565b91505092915050565b600060208284031215610e6857600080fd5b6000610e7684828501610d06565b91505092915050565b600060208284031215610e9157600080fd5b6000610e9f84828501610d1b565b91505092915050565b60008060208385031215610ebb57600080fd5b600083013567ffffffffffffffff811115610ed557600080fd5b610ee185828601610d30565b92509250509250929050565b600080600060408486031215610f0257600080fd5b600084013567ffffffffffffffff811115610f1c57600080fd5b610f2886828701610d7a565b93509350506020610f3b86828701610e18565b9150509250925092565b600060208284031215610f5757600080fd5b600082015167ffffffffffffffff811115610f7157600080fd5b610f7d84828501610dc4565b91505092915050565b600060208284031215610f9857600080fd5b600082015167ffffffffffffffff811115610fb257600080fd5b610fbe84828501610dee565b91505092915050565b6000610fd383836110ff565b905092915050565b6000610fe78383611138565b905092915050565b6000610ffa82611332565b6110048185611378565b93508360208202850161101685611312565b8060005b8581101561105257848403895281516110338582610fc7565b945061103e8361135e565b925060208a0199505060018101905061101a565b50829750879550505050505092915050565b600061106f8261133d565b6110798185611389565b93508360208202850161108b85611322565b8060005b858110156110c757848403895281516110a88582610fdb565b94506110b38361136b565b925060208a0199505060018101905061108f565b50829750879550505050505092915050565b6110e281611635565b82525050565b6110f96110f482611635565b611740565b82525050565b600061110a82611348565b611114818561139a565b9350611124818560208601611669565b61112d816117a8565b840191505092915050565b600061114382611353565b61114d81856113ab565b935061115d818560208601611669565b611166816117a8565b840191505092915050565b61117a8161165f565b82525050565b600061118c82856110e8565b60208201915061119c82846110e8565b6020820191508190509392505050565b600060208201905081810360008301526111c68184610fef565b905092915050565b600060208201905081810360008301526111e88184611064565b905092915050565b600060208201905061120560008301846110d9565b92915050565b600060408201905061122060008301856110d9565b61122d6020830184611171565b9392505050565b6000808335600160200384360303811261124d57600080fd5b80840192508235915067ffffffffffffffff82111561126b57600080fd5b60208301925060018202360383131561128357600080fd5b509250929050565b60006112956112a6565b90506112a182826116c6565b919050565b6000604051905090565b600067ffffffffffffffff8211156112cb576112ca611779565b5b6112d4826117a8565b9050602081019050919050565b600067ffffffffffffffff8211156112fc576112fb611779565b5b611305826117a8565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006113c78261165f565b91506113d28361165f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114075761140661174a565b5b828201905092915050565b6000808291508390505b600185111561145c578086048111156114385761143761174a565b5b60018516156114475780820291505b8081029050611455856117b9565b945061141c565b94509492505050565b60006114708261165f565b915061147b8361165f565b92506114a87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846114b0565b905092915050565b6000826114c0576001905061157c565b816114ce576000905061157c565b81600181146114e457600281146114ee5761151d565b600191505061157c565b60ff841115611500576114ff61174a565b5b8360020a9150848211156115175761151661174a565b5b5061157c565b5060208310610133831016604e8410600b84101617156115525782820a90508381111561154d5761154c61174a565b5b61157c565b61155f8484846001611412565b925090508184048111156115765761157561174a565b5b81810290505b9392505050565b600061158e8261165f565b91506115998361165f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115d2576115d161174a565b5b828202905092915050565b60006115e88261165f565b91506115f38361165f565b9250828210156116065761160561174a565b5b828203905092915050565b600061161c8261163f565b9050919050565b600061162e8261163f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561168757808201518184015260208101905061166c565b83811115611696576000848401525b50505050565b60006116a78261165f565b915060008214156116bb576116ba61174a565b5b600182039050919050565b6116cf826117a8565b810181811067ffffffffffffffff821117156116ee576116ed611779565b5b80604052505050565b60006117028261165f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117355761173461174a565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b6117cf81611611565b81146117da57600080fd5b50565b6117e681611623565b81146117f157600080fd5b50565b6117fd8161165f565b811461180857600080fd5b5056fea2646970667358221220c223cd09250ce936de06eeaade6da8c02506970e442dd1c0a97797ba8910da2e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "The `constructor` takes ENS registry address"
      },
      "getAddrs(string[],uint256)": {
        "notice": "Read only function to lookup addresses for a certain coinType"
      },
      "getNames(address[])": {
        "notice": "Read only function to return ens name only if both forward and reverse resolution are set     *"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1474,
        "contract": "contracts/ReverseRecords.sol:ReverseRecords",
        "label": "ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENS)136"
      },
      {
        "astId": 1477,
        "contract": "contracts/ReverseRecords.sol:ReverseRecords",
        "label": "registrar",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ReverseRegistrar)543"
      }
    ],
    "types": {
      "t_contract(ENS)136": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(ReverseRegistrar)543": {
        "encoding": "inplace",
        "label": "contract ReverseRegistrar",
        "numberOfBytes": "20"
      }
    }
  }
}