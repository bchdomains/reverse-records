{
  "address": "0x67F0DD63065675830cba1f3CDb74390f4d5251E1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "getNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "r",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x79c4544502bebf11b7548a2fa3046c74f3bf58360cee7fee2f7f42eeed2a75e7",
  "receipt": {
    "to": null,
    "from": "0xb69d54a4e31f24AFdD9eB1b53f8319aC83C646c9",
    "contractAddress": "0x67F0DD63065675830cba1f3CDb74390f4d5251E1",
    "transactionIndex": 0,
    "gasUsed": "1075257",
    "logsBloom": "0x
    "blockHash": "0x50fa2d29e1bf51fb570d99b3a2dbee0e65e0040f1133e6a0995a5e4adbeec809",
    "transactionHash": "0x79c4544502bebf11b7548a2fa3046c74f3bf58360cee7fee2f7f42eeed2a75e7",
    "logs": [],
    "blockNumber": 3639095,
    "cumulativeGasUsed": "1075257",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCfb86556760d03942EBf1ba88a9870e67D77b627"
  ],
  "numDeployments": 1,
  "solcInputHash": "67052368967ec6b801cc8552d0fc95ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"r\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"The `constructor` takes ENS registry address\"},\"getNames(address[])\":{\"notice\":\"Read only function to return ens name only if both forward and reverse resolution are set     *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReverseRecords.sol\":\"ReverseRecords\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@bchdomains/lns-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x942ef29bd7c0f62228aeb91879ddd1ba101f52a2162970d3e48adffa498f4483\"},\"@bchdomains/lns-contracts/contracts/registry/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../root/Controllable.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n// namehash('addr.reverse')\\n\\ncontract ReverseRegistrar is Ownable, Controllable {\\n    ENS public ens;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     * @param resolverAddr The address of the default reverse resolver.\\n     */\\n    constructor(ENS ensAddr, NameResolver resolverAddr) {\\n        ens = ensAddr;\\n        defaultResolver = resolverAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ens.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                ens.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address owner) public returns (bytes32) {\\n        return _claimWithResolver(msg.sender, owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimForAddr(address addr, address owner)\\n        public\\n        authorised(addr)\\n        returns (bytes32)\\n    {\\n        return _claimWithResolver(addr, owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver)\\n        public\\n        returns (bytes32)\\n    {\\n        return _claimWithResolver(msg.sender, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record specified with the\\n     *      address provided\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolverForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public authorised(addr) returns (bytes32) {\\n        return _claimWithResolver(addr, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public returns (bytes32) {\\n        bytes32 node = _claimWithResolver(\\n            msg.sender,\\n            address(this),\\n            address(defaultResolver)\\n        );\\n        defaultResolver.setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the account provided. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param owner The owner of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        string memory name\\n    ) public authorised(addr) returns (bytes32) {\\n        bytes32 node = _claimWithResolver(\\n            addr,\\n            address(this),\\n            address(defaultResolver)\\n        );\\n        defaultResolver.setName(node, name);\\n        ens.setSubnodeOwner(ADDR_REVERSE_NODE, sha3HexAddress(addr), owner);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\\n            );\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    /* Internal functions */\\n\\n    function _claimWithResolver(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) internal returns (bytes32) {\\n        bytes32 label = sha3HexAddress(addr);\\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\\n        address currentResolver = ens.resolver(node);\\n        bool shouldUpdateResolver = (resolver != address(0x0) &&\\n            resolver != currentResolver);\\n        address newResolver = shouldUpdateResolver ? resolver : currentResolver;\\n\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, label, owner, newResolver, 0);\\n\\n        emit ReverseClaimed(addr, node);\\n\\n        return node;\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6151b50f057afe5e32f9ef2f05b3c5c3ac8719b5900aead76d60be4356997ef6\"},\"@bchdomains/lns-contracts/contracts/resolvers/ISupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) external pure returns(bool);\\n}\",\"keccak256\":\"0x4960422af4a3d38a2c440c656104465cba7dea0231cb7ae4a489a85dd65f645f\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./ISupportsInterface.sol\\\";\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is ISupportsInterface, IABIResolver, IAddressResolver, IAddrResolver, IContentHashResolver, IDNSRecordResolver, IDNSZoneResolver, IInterfaceResolver, INameResolver, IPubkeyResolver, ITextResolver {\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\\n    function setAddr(bytes32 node, address addr) external;\\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n    function setName(bytes32 node, string calldata _name) external;\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n    function setText(bytes32 node, string calldata key, string calldata value) external;\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n    function setContent(bytes32 node, bytes32 hash) external;\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0x334dfe224d0acfd99e31f939710833ced6281228cd71e1065ab985cf4df2f3fe\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./SupportsInterface.sol\\\";\\n\\nabstract contract ResolverBase is SupportsInterface {\\n    function isAuthorised(bytes32 node) internal virtual view returns(bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xee4e3e99b515bdb2fc231c81fc6ff35cf09c3b57e9aaef538bfbb32f7c59248c\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/SupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ISupportsInterface.sol\\\";\\n\\nabstract contract SupportsInterface is ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(ISupportsInterface).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xcd27206ee8f8bd520d5441294f6438dde98f6933eb8801ee59a0155b8a8cde1b\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IABIResolver.sol\\\";\\nimport \\\"../ResolverBase.sol\\\";\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x37d037dd1cb59d7406ccd07d69e7206470c0aa3331c0efb92001769389bf4f2d\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n}\\n\",\"keccak256\":\"0x20717682fa28eb1755a3b6ade738c8e0239c1cc393579058d4c3ffaca238c04b\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record);\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n    // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n    event DNSZoneCleared(bytes32 indexed node);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(bytes32 node, bytes32 name, uint16 resource) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x640992fd5ad915a67712e2343ea0b8c5c0b88ea2646ff6bb713d448bef6ebfb5\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash);\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x3b3ca51ab4dcc4eee417bf1ffa54e10d9cf6a30d8f0e3722915965b06355ecb4\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc2673ebfb678b4c2730bff0434daf3a974d9ee0696c4adf533b41802f291745d\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x36a6602f2d76f373c5e1dcded0c87e1d3ab5180dbbbea7aa2a8d0e9a36273e38\",\"license\":\"MIT\"},\"@bchdomains/lns-contracts/contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x0c364a5b65b6fff279adbe1fd6498c488feabeec781599cd60a5844e80ee7d88\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Namehash.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nlibrary Strings {\\n    struct slice {\\n        uint _len;\\n        uint _ptr;\\n    }\\n    \\n    /*\\n     * @dev Returns a slice containing the entire string.\\n     * @param self The string to make a slice from.\\n     * @return A newly allocated slice containing the entire string.\\n     */\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\n        uint ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of the slice.\\n     * @param self The slice to hash.\\n     * @return The hash of the slice.\\n     */\\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\\n        assembly {\\n            ret := keccak256(mload(add(self, 32)), mload(self))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice is empty (has a length of 0).\\n     * @param self The slice to operate on.\\n     * @return True if the slice is empty, False otherwise.\\n     */\\n    function empty(slice memory self) internal pure returns (bool) {\\n        return self._len == 0;\\n    }\\n    \\n    // Returns the memory address of the first byte after the last occurrence of\\n    // `needle` in `self`, or the address of `self` if not found.\\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\n        uint ptr;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n\\n                bytes32 needledata;\\n                assembly { needledata := and(mload(needleptr), mask) }\\n\\n                ptr = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly { ptrdata := and(mload(ptr), mask) }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr <= selfptr)\\n                        return selfptr;\\n                    ptr--;\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\n                }\\n                return ptr + needlelen;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly { hash := keccak256(needleptr, needlelen) }\\n                ptr = selfptr + (selflen - needlelen);\\n                while (ptr >= selfptr) {\\n                    bytes32 testHash;\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\n                    if (hash == testHash)\\n                        return ptr + needlelen;\\n                    ptr -= 1;\\n                }\\n            }\\n        }\\n        return selfptr;\\n    }\\n    \\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and `token` to everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = ptr;\\n        token._len = self._len - (ptr - self._ptr);\\n        if (ptr == self._ptr) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n        }\\n        return token;\\n    }\\n}\\n\\nlibrary Namehash {\\n    using Strings for *;\\n    \\n    function namehash(string memory name) pure internal returns(bytes32 hash) {\\n        hash = bytes32(0);\\n        Strings.slice memory nameslice = name.toSlice();\\n        Strings.slice memory delim = \\\".\\\".toSlice();\\n        Strings.slice memory token;\\n        for(nameslice.rsplit(delim, token); !token.empty(); nameslice.rsplit(delim, token)) {\\n            hash = keccak256(abi.encodePacked(hash, token.keccak()));\\n        }\\n        return hash;\\n    }\\n}\\n\",\"keccak256\":\"0xe761d13aaf821b160a5535af63ae4b884153efc520ee4e52aafcf95d0c411409\"},\"contracts/ReverseRecords.sol\":{\"content\":\"pragma solidity ^0.8.4;pragma experimental ABIEncoderV2;\\nimport \\\"./Namehash.sol\\\";\\nimport '@bchdomains/lns-contracts/contracts/registry/ENS.sol';\\nimport '@bchdomains/lns-contracts/contracts/registry/ReverseRegistrar.sol';\\nimport '@bchdomains/lns-contracts/contracts/resolvers/Resolver.sol';\\ncontract ReverseRecords {\\n    ENS ens;\\n    ReverseRegistrar registrar;\\n    bytes32 private constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    /**\\n     * The `constructor` takes ENS registry address\\n     */\\n    constructor(ENS _ens) {\\n        ens = _ens;\\n        registrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));\\n    }\\n\\n    /**\\n     * Read only function to return ens name only if both forward and reverse resolution are set     *\\n     */\\n    function getNames(address[] calldata addresses) external view returns (string[] memory r) {\\n        r = new string[](addresses.length);\\n        for(uint i = 0; i < addresses.length; i++) {\\n            bytes32 node = node(addresses[i]);\\n            address resolverAddress = ens.resolver(node);\\n            if(resolverAddress != address(0x0)){\\n                Resolver resolver = Resolver(resolverAddress);\\n                string memory name = resolver.name(node);\\n                if(bytes(name).length == 0 ){\\n                    continue;\\n                }\\n                bytes32 namehash = Namehash.namehash(name);\\n                address forwardResolverAddress = ens.resolver(namehash);\\n                if(forwardResolverAddress != address(0x0)){\\n                    Resolver forwardResolver = Resolver(forwardResolverAddress);\\n                    address forwardAddress = forwardResolver.addr(namehash);\\n                    if(forwardAddress == addresses[i]){\\n                        r[i] = name;\\n                    }\\n                }\\n            }\\n        }\\n        return r;\\n    }\\n\\n    function node(address addr) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\\n    }\\n\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        addr;\\n        ret; // Stop warning us about unused variables\\n        assembly {\\n            let _lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\\n\\n            for { let i := 40 } gt(i, 0) { } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), _lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), _lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n}\",\"keccak256\":\"0x50aa49aa93f0bf8649c386e9fe68d6dd8995d032c4724c7dc11f0c939c665cb1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001459380380620014598339818101604052810190620000379190620001ea565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be37f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b6040518263ffffffff1660e01b8152600401620000f5919062000227565b60206040518083038186803b1580156200010e57600080fd5b505afa15801562000123573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001499190620001be565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620002ca565b600081519050620001a18162000296565b92915050565b600081519050620001b881620002b0565b92915050565b600060208284031215620001d157600080fd5b6000620001e18482850162000190565b91505092915050565b600060208284031215620001fd57600080fd5b60006200020d84828501620001a7565b91505092915050565b620002218162000258565b82525050565b60006020820190506200023e600083018462000216565b92915050565b6000620002518262000276565b9050919050565b6000819050919050565b60006200026f8262000244565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002a18162000244565b8114620002ad57600080fd5b50565b620002bb8162000262565b8114620002c757600080fd5b50565b61117f80620002da6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cbf8b66c14610030575b600080fd5b61004a60048036038101906100459190610a8f565b610060565b6040516100579190610c29565b60405180910390f35b60608282905067ffffffffffffffff8111156100a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156100d857816020015b60608152602001906001900390816100c35790505b50905060005b83839050811015610535576000610141858584818110610127577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061013c9190610a14565b61053c565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b815260040161019f9190610c4b565b60206040518083038186803b1580156101b757600080fd5b505afa1580156101cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ef9190610a3d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461051f57600081905060008173ffffffffffffffffffffffffffffffffffffffff1663691f3431856040518263ffffffff1660e01b81526004016102659190610c4b565b60006040518083038186803b15801561027d57600080fd5b505afa158015610291573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ba9190610ad4565b90506000815114156102cf5750505050610522565b60006102da82610599565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b81526004016103389190610c4b565b60206040518083038186803b15801561035057600080fd5b505afa158015610364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103889190610a3d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461051a57600081905060008173ffffffffffffffffffffffffffffffffffffffff16633b3b57de856040518263ffffffff1660e01b81526004016103fe9190610c4b565b60206040518083038186803b15801561041657600080fd5b505afa15801561042a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044e9190610a66565b90508b8b8a818110610489577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061049e9190610a14565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561051757848a8a8151811061050b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505b50505b505050505b50505b808061052d9061104c565b9150506100de565b5092915050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b61056b83610672565b60405160200161057c929190610bfd565b604051602081830303815290604052805190602001209050919050565b60008060001b905060006105ac836106dc565b905060006105ee6040518060400160405280600181526020017f2e000000000000000000000000000000000000000000000000000000000000008152506106dc565b90506105f8610909565b61060d82828561070a9092919063ffffffff16565b505b610618816107b8565b61066a5783610626826107c8565b604051602001610637929190610bfd565b60405160208183030381529060405280519060200120935061066482828561070a9092919063ffffffff16565b5061060f565b505050919050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b60008111156106ce5760018103905081600f85161a815360108404935060018103905081600f85161a8153601084049350610698565b506028600020915050919050565b6106e4610909565b600060208301905060405180604001604052808451815260200182815250915050919050565b610712610909565b600061073085600001518660200151866000015187602001516107d9565b90508083602001818152505084602001518161074c9190610f32565b856000015161075b9190610f32565b83600001818152505084602001518114156107805760008560000181815250506107ad565b836000015183600001516107949190610d11565b856000018181516107a59190610f32565b915081815250505b829150509392505050565b6000808260000151149050919050565b600081516020830151209050919050565b6000808584116108fc576020841161089857600060018560206107fc9190610f32565b60086108089190610ed8565b60026108149190610dba565b61081e9190610f32565b1960001b905060008185511690508588886108399190610d11565b6108439190610f32565b925060008284511690505b818114610881578784116108685787945050505050610901565b838061087390610ff1565b94505082845116905061084e565b868461088d9190610d11565b945050505050610901565b6000848420905084876108ab9190610f32565b866108b69190610d11565b91505b8582106108fa5760008583209050808214156108e55785836108db9190610d11565b9350505050610901565b6001836108f29190610f32565b9250506108b9565b505b849150505b949350505050565b604051806040016040528060008152602001600081525090565b600061093661093184610c8b565b610c66565b90508281526020810184848401111561094e57600080fd5b610959848285610fbe565b509392505050565b6000813590506109708161111b565b92915050565b6000815190506109858161111b565b92915050565b60008151905061099a81611132565b92915050565b60008083601f8401126109b257600080fd5b8235905067ffffffffffffffff8111156109cb57600080fd5b6020830191508360208202830111156109e357600080fd5b9250929050565b600082601f8301126109fb57600080fd5b8151610a0b848260208601610923565b91505092915050565b600060208284031215610a2657600080fd5b6000610a3484828501610961565b91505092915050565b600060208284031215610a4f57600080fd5b6000610a5d84828501610976565b91505092915050565b600060208284031215610a7857600080fd5b6000610a868482850161098b565b91505092915050565b60008060208385031215610aa257600080fd5b600083013567ffffffffffffffff811115610abc57600080fd5b610ac8858286016109a0565b92509250509250929050565b600060208284031215610ae657600080fd5b600082015167ffffffffffffffff811115610b0057600080fd5b610b0c848285016109ea565b91505092915050565b6000610b218383610bc4565b905092915050565b6000610b3482610ccc565b610b3e8185610cef565b935083602082028501610b5085610cbc565b8060005b85811015610b8c5784840389528151610b6d8582610b15565b9450610b7883610ce2565b925060208a01995050600181019050610b54565b50829750879550505050505092915050565b610ba781610f8a565b82525050565b610bbe610bb982610f8a565b611095565b82525050565b6000610bcf82610cd7565b610bd98185610d00565b9350610be9818560208601610fbe565b610bf2816110fd565b840191505092915050565b6000610c098285610bad565b602082019150610c198284610bad565b6020820191508190509392505050565b60006020820190508181036000830152610c438184610b29565b905092915050565b6000602082019050610c606000830184610b9e565b92915050565b6000610c70610c81565b9050610c7c828261101b565b919050565b6000604051905090565b600067ffffffffffffffff821115610ca657610ca56110ce565b5b610caf826110fd565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610d1c82610fb4565b9150610d2783610fb4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5c57610d5b61109f565b5b828201905092915050565b6000808291508390505b6001851115610db157808604811115610d8d57610d8c61109f565b5b6001851615610d9c5780820291505b8081029050610daa8561110e565b9450610d71565b94509492505050565b6000610dc582610fb4565b9150610dd083610fb4565b9250610dfd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610e05565b905092915050565b600082610e155760019050610ed1565b81610e235760009050610ed1565b8160018114610e395760028114610e4357610e72565b6001915050610ed1565b60ff841115610e5557610e5461109f565b5b8360020a915084821115610e6c57610e6b61109f565b5b50610ed1565b5060208310610133831016604e8410600b8410161715610ea75782820a905083811115610ea257610ea161109f565b5b610ed1565b610eb48484846001610d67565b92509050818404811115610ecb57610eca61109f565b5b81810290505b9392505050565b6000610ee382610fb4565b9150610eee83610fb4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f2757610f2661109f565b5b828202905092915050565b6000610f3d82610fb4565b9150610f4883610fb4565b925082821015610f5b57610f5a61109f565b5b828203905092915050565b6000610f7182610f94565b9050919050565b6000610f8382610f94565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610fdc578082015181840152602081019050610fc1565b83811115610feb576000848401525b50505050565b6000610ffc82610fb4565b915060008214156110105761100f61109f565b5b600182039050919050565b611024826110fd565b810181811067ffffffffffffffff82111715611043576110426110ce565b5b80604052505050565b600061105782610fb4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561108a5761108961109f565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b61112481610f66565b811461112f57600080fd5b50565b61113b81610f78565b811461114657600080fd5b5056fea2646970667358221220df59e6e92a37affe417a5cf5ff00396ca7f96005c3f5065b44841d922c4778d964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cbf8b66c14610030575b600080fd5b61004a60048036038101906100459190610a8f565b610060565b6040516100579190610c29565b60405180910390f35b60608282905067ffffffffffffffff8111156100a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156100d857816020015b60608152602001906001900390816100c35790505b50905060005b83839050811015610535576000610141858584818110610127577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061013c9190610a14565b61053c565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b815260040161019f9190610c4b565b60206040518083038186803b1580156101b757600080fd5b505afa1580156101cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ef9190610a3d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461051f57600081905060008173ffffffffffffffffffffffffffffffffffffffff1663691f3431856040518263ffffffff1660e01b81526004016102659190610c4b565b60006040518083038186803b15801561027d57600080fd5b505afa158015610291573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ba9190610ad4565b90506000815114156102cf5750505050610522565b60006102da82610599565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b81526004016103389190610c4b565b60206040518083038186803b15801561035057600080fd5b505afa158015610364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103889190610a3d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461051a57600081905060008173ffffffffffffffffffffffffffffffffffffffff16633b3b57de856040518263ffffffff1660e01b81526004016103fe9190610c4b565b60206040518083038186803b15801561041657600080fd5b505afa15801561042a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044e9190610a66565b90508b8b8a818110610489577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061049e9190610a14565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561051757848a8a8151811061050b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505b50505b505050505b50505b808061052d9061104c565b9150506100de565b5092915050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b61056b83610672565b60405160200161057c929190610bfd565b604051602081830303815290604052805190602001209050919050565b60008060001b905060006105ac836106dc565b905060006105ee6040518060400160405280600181526020017f2e000000000000000000000000000000000000000000000000000000000000008152506106dc565b90506105f8610909565b61060d82828561070a9092919063ffffffff16565b505b610618816107b8565b61066a5783610626826107c8565b604051602001610637929190610bfd565b60405160208183030381529060405280519060200120935061066482828561070a9092919063ffffffff16565b5061060f565b505050919050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b60008111156106ce5760018103905081600f85161a815360108404935060018103905081600f85161a8153601084049350610698565b506028600020915050919050565b6106e4610909565b600060208301905060405180604001604052808451815260200182815250915050919050565b610712610909565b600061073085600001518660200151866000015187602001516107d9565b90508083602001818152505084602001518161074c9190610f32565b856000015161075b9190610f32565b83600001818152505084602001518114156107805760008560000181815250506107ad565b836000015183600001516107949190610d11565b856000018181516107a59190610f32565b915081815250505b829150509392505050565b6000808260000151149050919050565b600081516020830151209050919050565b6000808584116108fc576020841161089857600060018560206107fc9190610f32565b60086108089190610ed8565b60026108149190610dba565b61081e9190610f32565b1960001b905060008185511690508588886108399190610d11565b6108439190610f32565b925060008284511690505b818114610881578784116108685787945050505050610901565b838061087390610ff1565b94505082845116905061084e565b868461088d9190610d11565b945050505050610901565b6000848420905084876108ab9190610f32565b866108b69190610d11565b91505b8582106108fa5760008583209050808214156108e55785836108db9190610d11565b9350505050610901565b6001836108f29190610f32565b9250506108b9565b505b849150505b949350505050565b604051806040016040528060008152602001600081525090565b600061093661093184610c8b565b610c66565b90508281526020810184848401111561094e57600080fd5b610959848285610fbe565b509392505050565b6000813590506109708161111b565b92915050565b6000815190506109858161111b565b92915050565b60008151905061099a81611132565b92915050565b60008083601f8401126109b257600080fd5b8235905067ffffffffffffffff8111156109cb57600080fd5b6020830191508360208202830111156109e357600080fd5b9250929050565b600082601f8301126109fb57600080fd5b8151610a0b848260208601610923565b91505092915050565b600060208284031215610a2657600080fd5b6000610a3484828501610961565b91505092915050565b600060208284031215610a4f57600080fd5b6000610a5d84828501610976565b91505092915050565b600060208284031215610a7857600080fd5b6000610a868482850161098b565b91505092915050565b60008060208385031215610aa257600080fd5b600083013567ffffffffffffffff811115610abc57600080fd5b610ac8858286016109a0565b92509250509250929050565b600060208284031215610ae657600080fd5b600082015167ffffffffffffffff811115610b0057600080fd5b610b0c848285016109ea565b91505092915050565b6000610b218383610bc4565b905092915050565b6000610b3482610ccc565b610b3e8185610cef565b935083602082028501610b5085610cbc565b8060005b85811015610b8c5784840389528151610b6d8582610b15565b9450610b7883610ce2565b925060208a01995050600181019050610b54565b50829750879550505050505092915050565b610ba781610f8a565b82525050565b610bbe610bb982610f8a565b611095565b82525050565b6000610bcf82610cd7565b610bd98185610d00565b9350610be9818560208601610fbe565b610bf2816110fd565b840191505092915050565b6000610c098285610bad565b602082019150610c198284610bad565b6020820191508190509392505050565b60006020820190508181036000830152610c438184610b29565b905092915050565b6000602082019050610c606000830184610b9e565b92915050565b6000610c70610c81565b9050610c7c828261101b565b919050565b6000604051905090565b600067ffffffffffffffff821115610ca657610ca56110ce565b5b610caf826110fd565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610d1c82610fb4565b9150610d2783610fb4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5c57610d5b61109f565b5b828201905092915050565b6000808291508390505b6001851115610db157808604811115610d8d57610d8c61109f565b5b6001851615610d9c5780820291505b8081029050610daa8561110e565b9450610d71565b94509492505050565b6000610dc582610fb4565b9150610dd083610fb4565b9250610dfd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610e05565b905092915050565b600082610e155760019050610ed1565b81610e235760009050610ed1565b8160018114610e395760028114610e4357610e72565b6001915050610ed1565b60ff841115610e5557610e5461109f565b5b8360020a915084821115610e6c57610e6b61109f565b5b50610ed1565b5060208310610133831016604e8410600b8410161715610ea75782820a905083811115610ea257610ea161109f565b5b610ed1565b610eb48484846001610d67565b92509050818404811115610ecb57610eca61109f565b5b81810290505b9392505050565b6000610ee382610fb4565b9150610eee83610fb4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f2757610f2661109f565b5b828202905092915050565b6000610f3d82610fb4565b9150610f4883610fb4565b925082821015610f5b57610f5a61109f565b5b828203905092915050565b6000610f7182610f94565b9050919050565b6000610f8382610f94565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610fdc578082015181840152602081019050610fc1565b83811115610feb576000848401525b50505050565b6000610ffc82610fb4565b915060008214156110105761100f61109f565b5b600182039050919050565b611024826110fd565b810181811067ffffffffffffffff82111715611043576110426110ce565b5b80604052505050565b600061105782610fb4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561108a5761108961109f565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b61112481610f66565b811461112f57600080fd5b50565b61113b81610f78565b811461114657600080fd5b5056fea2646970667358221220df59e6e92a37affe417a5cf5ff00396ca7f96005c3f5065b44841d922c4778d964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "The `constructor` takes ENS registry address"
      },
      "getNames(address[])": {
        "notice": "Read only function to return ens name only if both forward and reverse resolution are set     *"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6118,
        "contract": "contracts/ReverseRecords.sol:ReverseRecords",
        "label": "ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENS)2212"
      },
      {
        "astId": 6121,
        "contract": "contracts/ReverseRecords.sol:ReverseRecords",
        "label": "registrar",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ReverseRegistrar)3043"
      }
    ],
    "types": {
      "t_contract(ENS)2212": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_contract(ReverseRegistrar)3043": {
        "encoding": "inplace",
        "label": "contract ReverseRegistrar",
        "numberOfBytes": "20"
      }
    }
  }
}